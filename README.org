#+TITLE: hass

[[https://melpa.org/#/hass][file:https://melpa.org/packages/hass-badge.svg]]
[[https://stable.melpa.org/#/hass][file:https://stable.melpa.org/packages/hass-badge.svg]]

~hass~ enables you to control [[https://www.home-assistant.io/][Home Assistant]] entities from Emacs.

* Installation

This package is available on [[https://melpa.org/][MELPA]].

** package.el

#+BEGIN_SRC emacs-lisp :results none
(use-package hass
  :ensure t
  (setq hass-host "homeassistant"
        hass-insecure t
        hass-apikey "APIKEY-GOES-IN-HERE")
  (hass-setup))
#+END_SRC

** straight.el

#+BEGIN_SRC emacs-lisp :results none
(straight-use-package 'hass)
(setq hass-host "homeassistant"
      hass-insecure t
      hass-apikey "APIKEY-GOES-IN-HERE")
(hass-setup)
#+END_SRC

** Doom Emacs

Place in your ~packages.el~ then run ~doom sync~ to pull the repository:

#+BEGIN_SRC emacs-lisp :results none
(package! hass)
#+END_SRC

Then load the package in your main config file.

#+BEGIN_SRC emacs-lisp :results none
(use-package! hass
  :config
  (setq hass-host "homeassistant"
        hass-insecure t
        hass-apikey "APIKEY-GOES-IN-HERE")
  (hass-setup))
#+END_SRC

* Configuration

Both ~hass-host~ and ~hass-apikey~ must be set to use this package. Set ~hass-host~ to the hostname or URL of Home
Assistant instance. If you are not using SSL/TLS to connect to your Home Assistance instance, set ~hass-insecure~ to ~t~.

#+BEGIN_SRC emacs-lisp :results none
(setq hass-host "homeassistant"
      hass-apikey "APIKEY-GOES-IN-HERE")
(hass-setup)
#+END_SRC

Alternatively, you can store a function inside ~hass-apikey~. This will be executed on every
query. In turn, this approach requires the token to be stored in your gpg store e.g. =~/.password-store/emacs-apikey.gpg=

#+BEGIN_SRC emacs-lisp :results none
(setq hass-apikey (lambda () (auth-source-pass-get 'secret "emacs-apikey")))
(setq hass-url "http://homeassistant:8123")
(hass-setup)
#+END_SRC

Once those variables are set, you must call ~(hass-setup)~ before using this package so that it can
query the Home Assistance instance and populate available entities and services.

** Getting an API Key

Ensure that your Home Assistant instance is configured to support API calls by following the
instructions [[https://www.home-assistant.io/integrations/api/][here]].

Retrieve your API key a.k.a. /Long-Lived Access Token/ by logging into your Home Assistant instance
and going to your profile by selecting your username in the lower-left corner or going to this URL:
=http://HOME-ASSISTANT-URL:8123/profile=. You can generate an API token at the very bottom of this
page.

* Usage

To call a service on Home Assistant, use the ~hass-call-service~ function which has two required
arguments: ~entity-id~ and ~service~.

#+BEGIN_SRC emacs-lisp :results none
(hass-call-service "switch.bedroom_light" "switch.toggle")
#+END_SRC

If you call ~hass-call-service~ interactively, it will prompt you for an entity ID and then the
respective service you want to call.

** Payloads

For services that require additional data use the ~hass-call-service-with-payload~ function. The
second argument, ~payload~, requires an JSON encoded string.

This example publishes to an MQTT topic:

#+BEGIN_SRC emacs-lisp :results none
(hass-call-service-with-payload
 "mqtt.publish"
 (json-encode '(("payload" . "PERFORM")
                ("topic" . "valetudo/vacuum/LocateCapability/locate/set"))))
#+END_SRC

You could pass a JSON string directly, but that would require escaping every quote which can be
cumbersome. Here's what the encoded list above looks like in JSON:

#+BEGIN_SRC javascript
{
  "payload": "PERFORM",
  "topic": "valetudo/vacuum/LocateCapability/locate/set"
}
#+END_SRC

** Watching entities

~hass-watch-mode~ is a mode that periodically queries the Home Assistant instance to get the current
state of a list of entities. The list of entity IDs that will be queried are found in the variable
~hass-watch-entities~.

#+BEGIN_SRC emacs-lisp :results none
(setq hass-watch-entities '("switch.bedroom_light" "switch.bedroom_fan"))
#+END_SRC

The frequency of the query can be adjusted by setting ~hass-watch-frequency~ to the number of
seconds you'd like. Defaults to 60.

Watching is most useful with the function hook ~hass-entity-state-updated-functions~ explained in
the [[*Hooks][Hooks]] section.

** Hooks

The most useful hook is a function list named ~hass-entity-state-updated-functions~. Functions in
this list are passed a single argument ~entity-id~ which is the entity id of the entity whose state
has changed since it was last updated. Using this function hook along side [[*Watching entities][watching entities]] enables
Emacs to react to changes to Home Assistant entities.

This example will display the state of an entity when it changes:

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'hass-entity-state-updated-functions
  (lambda (entity-id)
    (message "The entity %s state has changed to %s." entity-id (hass-state-of entity-id))))
#+END_SRC

The other two hooks available are ~hass-entity-state-updated-hook~ and
~hass-service-called-hook~. ~hass-entity-state-updated-hook~ is called when the state of an entity
is updated, regardless of if it changed or not. ~hass-service-called-hook~ is called when a service
is called.

#+BEGIN_SRC emacs-lisp :results none
(add-hook 'hass-service-called-hook (lambda () (message "A service was called.")))
(add-hook 'hass-entity-state-updated-hook (lambda () (message "An entitys' state was updated.")))
#+END_SRC

* License

MIT
